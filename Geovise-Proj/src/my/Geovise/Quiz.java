package my.Geovise;//Stating what package this file is part of. It is part of the my.contacteditor package

import java.awt.event.ActionEvent; // Importing the action event and listener, to check when the user clicks on an object in the frame
import java.awt.event.ActionListener;
import java.sql.Connection; //Importing the connection libaries for the SQL database, allowing me to conenct to it later on
import java.sql.DriverManager; // Allows for the use of drivers and managing them
import java.sql.PreparedStatement;// Allows me to execute and use prepared statements for SQL statements
import java.util.Calendar; //  Allows me to create the clock
import javax.swing.ImageIcon; // Importing to allow me to set the default icon when the frame is opened.
import javax.swing.JFrame;
import javax.swing.JOptionPane; //Allows for the use of option panes
import javax.swing.Timer; // Allows for the use of a timer class
import static my.Geovise.Login.GetFirstRound; // Importing global variables :
import static my.Geovise.Login.USERNAME;
import static my.Geovise.MainUI.NotesOpen;
import static my.Geovise.MainUI.OptionOpen;

public class Quiz extends javax.swing.JFrame {// Extends the JFrame allows for the gui functionality

    /**
     * Creates new form Quiz_Q_1
     */
    int xMouse;// The integer xMouse contains the value of the x coord that the mouse is currently at
    int YMouse;// The integer variable yMouse contains the value of the y coord that the mouse is currently at
    public static boolean firstRoundCompleted = false; // Creating a global boolean variable to checkif the user has completed the tutorial round, default to false.
    public static int Score = 0; // Creating the global variable that all of the questions will adjust to track the score of the user, reset at the end of the 10 Q's
    public static int Question = 0; // Global variable for tracking how many questions have been completed.
    public static boolean NormalModeSelected = false; // Global boolean variable checking which mode the user has chosen ; timed or normal 
    public static boolean TimedModeSelected = false;
    int firstRoundCompletedInteger = 0;
    public static int CurrentQuestion = 0; // Global variable for tracking the current question number

    public Quiz() {
        initComponents();// Initialises all the the base framework
        Timer t = new Timer(100, new Quiz.Listener());// Creating the timer for the real time clock on the top of the toolbar
        t.start();//Starts the timer as the frame is opened
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        sql8133165PUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("sql8133165PU").createEntityManager();
        login_1Query = java.beans.Beans.isDesignTime() ? null : sql8133165PUEntityManager.createQuery("SELECT l FROM Login_1 l");
        login_1List = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : login_1Query.getResultList();
        login_1Query1 = java.beans.Beans.isDesignTime() ? null : sql8133165PUEntityManager.createQuery("SELECT l FROM Login_1 l");
        login_1List1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : login_1Query1.getResultList();
        login_1Query2 = java.beans.Beans.isDesignTime() ? null : sql8133165PUEntityManager.createQuery("SELECT l FROM Login_1 l");
        login_1List2 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : login_1Query2.getResultList();
        Icon = new javax.swing.JLabel();
        Settings = new javax.swing.JLabel();
        HelpToolbar = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ExitButtonToolbar = new javax.swing.JLabel();
        yourClock = new javax.swing.JLabel();
        FrameDrag = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        HighScoreTable = new javax.swing.JScrollPane();
        HighScore = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        NormalQuiz = new javax.swing.JButton();
        TimedQuiz = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        NotesButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Geovise - Quiz");
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1015, 539));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/Geovise/IconAssets/VolcanicSmall.png"))); // NOI18N
        getContentPane().add(Icon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        Settings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/Geovise/IconAssets/options.png"))); // NOI18N
        Settings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SettingsMouseClicked(evt);
            }
        });
        getContentPane().add(Settings, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 0, -1, -1));

        HelpToolbar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/Geovise/IconAssets/help.png"))); // NOI18N
        HelpToolbar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HelpToolbarMouseClicked(evt);
            }
        });
        getContentPane().add(HelpToolbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 0, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/Geovise/IconAssets/minimize.png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 0, 30, 27));

        ExitButtonToolbar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/Geovise/IconAssets/quit.png"))); // NOI18N
        ExitButtonToolbar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ExitButtonToolbarFocusGained(evt);
            }
        });
        ExitButtonToolbar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitButtonToolbarMouseClicked(evt);
            }
        });
        getContentPane().add(ExitButtonToolbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 0, -1, -1));

        yourClock.setForeground(new java.awt.Color(255, 255, 255));
        yourClock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(yourClock, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 28));

        FrameDrag.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                FrameDragMouseDragged(evt);
            }
        });
        FrameDrag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FrameDragMousePressed(evt);
            }
        });
        getContentPane().add(FrameDrag, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/Geovise/Assets/Toolbar_Medium.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 27));

        HighScore.setAutoCreateRowSorter(true);
        HighScore.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, login_1List2, HighScore);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${username}"));
        columnBinding.setColumnName("Username");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${highestScore}"));
        columnBinding.setColumnName("Highest Score");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        HighScoreTable.setViewportView(HighScore);

        getContentPane().add(HighScoreTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 430, 410, 100));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome To The Quiz , it will contain 10 different questions on random topics for the AQA AS geography spec.");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Please choose a Quiz mode : ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 110, -1, -1));

        NormalQuiz.setText("Normal Quiz");
        NormalQuiz.setBorder(new javax.swing.border.MatteBorder(null));
        NormalQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NormalQuizActionPerformed(evt);
            }
        });
        getContentPane().add(NormalQuiz, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 990, 40));

        TimedQuiz.setText("Timed Quiz");
        TimedQuiz.setBorder(new javax.swing.border.MatteBorder(null));
        TimedQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimedQuizActionPerformed(evt);
            }
        });
        getContentPane().add(TimedQuiz, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 990, 40));

        BackButton.setText("Back");
        BackButton.setBorder(new javax.swing.border.MatteBorder(null));
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        getContentPane().add(BackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 997, 31));

        NotesButton.setText("Notes");
        NotesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NotesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(NotesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 490, 120, 40));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/Geovise/Assets/Quiz_Background_Q9.jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 540));

        getAccessibleContext().setAccessibleName("Geography Revision WIP V0.1");

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static void runDiffScaler()
    {
        // Q11 -21 are the lower band difficulty questions
        // Q22 - 32 are the mid band difficulty questions
        // Q33 - 43 are the higher band difficulty questions
        //*******int currentQuestion;
        int nextQuestion;
        int bandIdentifier = 0; //1 for low, 2 for mid, 3 for high
        int ScorePercent = my.Geovise.Login.HighestScore*10;
        System.out.println(ScorePercent + "Score Percent ...");
        if(ScorePercent >= 80 )//High Band
        {
            bandIdentifier = 3;
        }
        if(ScorePercent >= 50 && ScorePercent < 80)//Mid Band
        {
            bandIdentifier = 2;
        }
        if(ScorePercent >= 0 && ScorePercent < 50)//Low Band
        {
            bandIdentifier = 1;
        }
        System.out.println(bandIdentifier + "Band itendifier...");
        if(my.Geovise.Quiz.Question < 10) //If the number of question is below 10 then give the user a question
        {
            if(bandIdentifier ==1) //low
            {
                nextQuestion = (int)(Math.random() * (21 - 11) + 11); //Generate a random integer number between 11 and 21
                System.out.println("next Question is...." + nextQuestion);// This is then the next question to be given
                if(nextQuestion==CurrentQuestion) // Don't want duplicate questions, so if the questions are the same then re run the function
                {
                    runDiffScaler();
                }
                else
                {
                    switch (nextQuestion) // Opens the question based off of the random integer
                    {
                        case 11:new Quiz_Questions.Q11().setVisible(true);
                                break;
                        case 12:new Quiz_Questions.Q12().setVisible(true);
                                break;
                        case 13:new Quiz_Questions.Q13().setVisible(true);
                                break;
                        case 14:new Quiz_Questions.Q14().setVisible(true);
                                break;
                        case 15:new Quiz_Questions.Q15().setVisible(true);
                                break;
                        case 16:new Quiz_Questions.Q16().setVisible(true);
                                break;
                        case 17:new Quiz_Questions.Q17().setVisible(true);
                                break;
                        case 18:new Quiz_Questions.Q18().setVisible(true);
                                break;
                        case 19:new Quiz_Questions.Q19().setVisible(true);
                                break;
                        case 20:new Quiz_Questions.Q20().setVisible(true);
                                break;
                        case 21:new Quiz_Questions.Q21().setVisible(true);
                                break;
                        case 22:new Quiz_Questions.Q11_1().setVisible(true);
                                break;
                        case 23:new Quiz_Questions.Q12_1().setVisible(true);
                                break;
                        case 24:new Quiz_Questions.Q13_1().setVisible(true);
                                break;
                        case 25:new Quiz_Questions.Q14_1().setVisible(true);
                                break;
                        case 26:new Quiz_Questions.Q15_1().setVisible(true);
                                break;
                        case 27:new Quiz_Questions.Q16_1().setVisible(true);
                                break;
                        case 28:new Quiz_Questions.Q17_1().setVisible(true);
                                break;
                        case 29:new Quiz_Questions.Q18_1().setVisible(true);
                                break;
                        case 30:new Quiz_Questions.Q19_1().setVisible(true);
                                break;
                        case 31:new Quiz_Questions.Q20_1().setVisible(true);
                                break;
                        case 32:new Quiz_Questions.Q21_1().setVisible(true);
                                break;                                
                    }
                }
            }
            if(bandIdentifier ==2)//mid
            {
                nextQuestion = (int)(Math.random() * (32 - 22) + 22); //Generate a random integer number between 22 and 32
                System.out.println("next Question is...." + nextQuestion);// This is then the next question to be given
                if(nextQuestion==CurrentQuestion)// Don't want duplicate questions, so if the questions are the same then re run the function
                {
                    runDiffScaler();
                }
                else
                {
                    switch (nextQuestion)// Opens the question based off of the random integer
                    {
                        case 22:new Quiz_Questions.Q22().setVisible(true);
                                break;
                        case 23:new Quiz_Questions.Q23().setVisible(true);
                                break;
                        case 24:new Quiz_Questions.Q24().setVisible(true);
                                break;
                        case 25:new Quiz_Questions.Q25().setVisible(true);
                                break;
                        case 26:new Quiz_Questions.Q26().setVisible(true);
                                break;
                        case 27:new Quiz_Questions.Q27().setVisible(true);
                                break;
                        case 28:new Quiz_Questions.Q28().setVisible(true);
                                break;
                        case 29:new Quiz_Questions.Q29().setVisible(true);
                                break;
                        case 30:new Quiz_Questions.Q30().setVisible(true);
                                break;
                        case 31:new Quiz_Questions.Q31().setVisible(true);
                                break;
                        case 32:new Quiz_Questions.Q32().setVisible(true);
                                break;
                    }
                }
            }
            if(bandIdentifier ==3)//high
            {
                nextQuestion = (int)(Math.random() * (44 - 33) + 33);//Generate a random integer number between 33 and 44
                System.out.println("next Question is...." + nextQuestion);// This is then the next question to be 
                if(nextQuestion==CurrentQuestion)// Don't want duplicate questions, so if the questions are the same then re run the function
                {
                    runDiffScaler();
                }
                else
                {
                    switch (nextQuestion)// Opens the question based off of the random integer
                    {
                        case 33:new Quiz_Questions.Q33().setVisible(true);
                                break;
                        case 34:new Quiz_Questions.Q34().setVisible(true);
                                break;
                        case 35:new Quiz_Questions.Q35().setVisible(true);
                                break;
                        case 36:new Quiz_Questions.Q36().setVisible(true);
                                break;
                        case 37:new Quiz_Questions.Q37().setVisible(true);
                                break;
                        case 38:new Quiz_Questions.Q38().setVisible(true);
                                break;
                        case 39:new Quiz_Questions.Q39().setVisible(true);
                                break;
                        case 40:new Quiz_Questions.Q40().setVisible(true);
                                break;
                        case 41:new Quiz_Questions.Q42().setVisible(true);
                                break;
                        case 42:new Quiz_Questions.Q43().setVisible(true);
                                break;
                        case 43:new Quiz_Questions.Q44().setVisible(true);
                                break;
                    }
                }
            }
        }
        else // If all 10 questions have been given to the user then...
        {
            if(my.Geovise.Login.HighestScore < my.Geovise.Quiz.Score) // and if the highest score of the user grabbed from the  DB, is greater than the current score then...
            {
                System.out.println("10Q Done .... Score is greater than highest score..."); // Debug line to check
                SetHighScore(USERNAME); // Run the set high score function to update it on the DB
            }
            my.Geovise.Quiz.Question = 0; //Resetting question number
            my.Geovise.Quiz.Score = 0; //Resetting current score
            System.out.println("Quiz Complete...");
        }


    }
    class Listener implements ActionListener
    {
        public void actionPerformed(ActionEvent e)
        {
            Calendar rightNow = Calendar.getInstance(); //Creating a new calendar which will act as the base for the clock

            int hour = rightNow.get(Calendar.HOUR_OF_DAY); //Integer variable for the hour, it grabs the HOUR_OF_DAY from the calendar import
            int min = rightNow.get(Calendar.MINUTE);// Setting the current minuite to an integer variable called min.
            int AMPM = rightNow.get(Calendar.AM_PM);// Setting wheter the time is currently AM or PM, this is also an integer variable called AMPM
            if(AMPM == 1)// AMPM is an integer variable, 1 being PM and 0 being AM. Its an integer so have to check if 1 or 0
            {
                if(min < 10)// The format does not add a zero to values below 10, so 10:09 would display 10:9 without this.
                {
                    yourClock.setText(hour + ":" + "0" + min + " " + "PM");// The format does not add a zero to values below 10, so 10:09 would display 10:9 without this.
                }
                else// However if its not below 10 then the extra 0 is not required.
                {
                    yourClock.setText(hour + ":" + min + " " + "PM");// No extra zero, just outputting the time with PM
                }

            }

            else// AMPM can either be 1 or 0, 1 is PM so the only other value is 0 which must be AM, no need for if statement
            {
                if(min < 10)// The format does not add a zero to values below 10, so 10:09 would display 10:9 without this.
                {
                    yourClock.setText(hour + ":" + "0" + min + " " + "PM");// Uses same code from above to add extra zero.
                }
                else
                {
                 yourClock.setText(hour + ":" + min + " " + "PM");// No extra zero, just outputting the time with AM
                }


            }
        }
    }
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        this.dispose(); //Closes the current window which is open, so the main menu
        new MainUI().setVisible(true);// Opens up the quiz window
    }//GEN-LAST:event_BackButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setIconImage(new ImageIcon(getClass().getResource("Volcanic.png")).getImage()); //replaces the default java icon with a custom icon image.
        if(my.Geovise.Login.FirstRoundComplete == 0) // If the user has not completed the first tutorial round
        {
            JOptionPane.showMessageDialog(null, "As you are a first time user of the quiz, you must first complete the default round to scale the difficulty later on"); // Displays a dialog box informing them of the tutorial round 
        }
    }//GEN-LAST:event_formWindowOpened

    private void SettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SettingsMouseClicked
        if(OptionOpen != true) //Checks if the boolean variable is false, so is the options menu open
        {   
            new Options().setVisible(true); //If its not open then it will open up the options menu
            OptionOpen = true; // It will also change the value of the variable to true. Of course once they click on the settings again it wont go into the statement above.
        }
        else // However if the options menu is open, and the variable is true
        {
            if(OptionOpen == true)
            {
                JOptionPane.showMessageDialog(null, "WARNING : Settings Already Open !"); //It will display a dialog box, and not open up the options menu
            }
        }
    }//GEN-LAST:event_SettingsMouseClicked

    private void ExitButtonToolbarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ExitButtonToolbarFocusGained

    }//GEN-LAST:event_ExitButtonToolbarFocusGained

    private void ExitButtonToolbarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitButtonToolbarMouseClicked
        System.exit(0); // Exiting the program 
    }//GEN-LAST:event_ExitButtonToolbarMouseClicked

    private void FrameDragMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FrameDragMouseDragged
        int x = evt.getXOnScreen();//Grabbing the final location where it is dragged to, for x coord
        int y = evt.getYOnScreen();//Grabbing the final location where it is dragged to, for y coord

        this.setLocation(x - xMouse, y - YMouse);//Offsetting to fix issue where it jumps to the right when moved.
    }//GEN-LAST:event_FrameDragMouseDragged

    private void FrameDragMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FrameDragMousePressed
        xMouse = evt.getX();//Grabbing the current x coord of the mouse when clicked
        YMouse = evt.getY(); //Grabbing the current y coord of the mouse when clicked
    }//GEN-LAST:event_FrameDragMousePressed

    private void NormalQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NormalQuizActionPerformed
        //Q1 - 10 are the default first round questions
        // Q11 -21 are the lower band difficulty questions
        // Q22 - 32 are the mid band difficulty questions
        // Q33 - 43 are the higher band difficulty questions
        NormalModeSelected = true; //When the user clicks on normal mode it sets the boolean variable to true to state that
        GetFirstRound(USERNAME); // Runs the function to check if the user has completed the tutorial round
        if(my.Geovise.Login.FirstRoundComplete == 0) // If the user hasn't completed the tutorial round then..
        {
            new Quiz_Questions.Q1().setVisible(true); // Open the first question, essentialy starting the tutorial round, as the tutorial is Q1-10
            this.dispose(); //Close the current active window

        }
        else // However if the user has completed the tutorial round then..
        {
            runDiffScaler(); // Run the difficulty scaler to choose a random question
            System.out.println(my.Geovise.Login.HighestScore); // Debugging line to ouput the highest score of the user
        }
    }//GEN-LAST:event_NormalQuizActionPerformed

    private void TimedQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimedQuizActionPerformed
        TimedModeSelected = true; // If the user clicks on the timed mode button then it will set the boolean variable to true
        GetFirstRound(USERNAME); // Runs the function to check if the user has completed the tutorial round
        if(my.Geovise.Login.FirstRoundComplete == 0) //So if the user has not completed the first round then...
        {
            new Quiz_Questions.Q1().setVisible(true); // Open Question 1, so essentially start the tutorial round
            this.dispose(); // Close the current active window.

        }
        else // However if they have completed the tutorial round then..
        {
            runDiffScaler(); // Run the difficulty scaler, which will give the user a random quesiton
            System.out.println(my.Geovise.Login.HighestScore); // Debugging line
        }        
    }//GEN-LAST:event_TimedQuizActionPerformed
    
    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus

    }//GEN-LAST:event_formWindowLostFocus

    private void NotesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NotesButtonActionPerformed
        if(NotesOpen != true) //Checks if the boolean variable is false, so is the options menu open
        {   
            new Options().setVisible(true); //If its not open then it will open up the options menu
            NotesOpen = true; // It will also change the value of the variable to true. Of course once they click on the settings again it wont go into the statement above.
        }
        else // However if the options menu is open, and the variable is true
        {
            if(NotesOpen == true)
            {
                JOptionPane.showMessageDialog(null, "WARNING : Notes Already Open !"); //It will display a dialog box, and not open up the options menu
            }
        }
    }//GEN-LAST:event_NotesButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        setExtendedState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void HelpToolbarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HelpToolbarMouseClicked
        this.dispose(); // Closes the current active window
        new Help.MainHelp().setVisible(true); // Opens the help menu
    }//GEN-LAST:event_HelpToolbarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Quiz().setVisible(true);
            }
        });
    }
    public static void SetHighScore(String USERNAME) // Function for setting the high score of the user , updating the DB
    {
        System.out.println("Running Update..."); // Debugging lines
        System.out.println(my.Geovise.Quiz.Score);
        System.out.println(USERNAME);
        try//Try and catch incase any errors are produced, such as a failed connection
        {
            Class.forName("com.mysql.jdbc.Driver").newInstance();  // MySQL database connection
            Connection conn = DriverManager.getConnection("jdbc:mysql://sql8.freemysqlhosting.net:3306/sql8133165?" + "user=sql8133165&password=" + "qWIM2CcWQf");//Creating the connection w/ user and pass
            PreparedStatement pst = conn.prepareStatement("UPDATE Login SET HighestScore ='"+my.Geovise.Quiz.Score+"'   WHERE username ='"+USERNAME+"'"); //Actual SQL statement
            pst.executeUpdate();;//Executing the statement.
        }
        catch(Exception e)
        {

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel ExitButtonToolbar;
    private javax.swing.JLabel FrameDrag;
    private javax.swing.JLabel HelpToolbar;
    private javax.swing.JTable HighScore;
    private javax.swing.JScrollPane HighScoreTable;
    private javax.swing.JLabel Icon;
    private javax.swing.JButton NormalQuiz;
    private javax.swing.JButton NotesButton;
    private javax.swing.JLabel Settings;
    private javax.swing.JButton TimedQuiz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private java.util.List<my.Geovise.Login_1> login_1List;
    private java.util.List<my.Geovise.Login_1> login_1List1;
    private java.util.List<my.Geovise.Login_1> login_1List2;
    private javax.persistence.Query login_1Query;
    private javax.persistence.Query login_1Query1;
    private javax.persistence.Query login_1Query2;
    private javax.persistence.EntityManager sql8133165PUEntityManager;
    private javax.swing.JLabel yourClock;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}

package my.Geovise;//Stating what package this file is part of. It is part of the my.contacteditor package

import javax.swing.*; // Importing the swing API
import java.awt.*;// Importing the events so when the user click on a button then it executes the subsuqent code.
import java.awt.event.*;
import java.io.*; //Importing all import and ouput libraries

public class Notes extends JFrame implements ActionListener // Extends the JFrame allows for the gui functionality
{
    JTextArea textArea = new JTextArea(); //Creating the blank text are where the user is able to type in
    JMenuBar menuBar = new JMenuBar();  //Creating the menu bar at the top of the frame, to allow the user to save files
    JMenu file = new JMenu(); // The actual item which is put into the menu bar created above
    JMenuItem open = new JMenuItem(); // Another option which will be under the file object in the menu bar

    /**
     * Creates new form Notes
     */
    public Notes() 
    {
        initComponents(); // Initialises all the the base framework
        setSize(600, 450); //Sets the inital dimensions of the frame to 600 x 450 pixels
        setVisible(true);  // Makes the frame visible for the user
        textArea = new JTextArea(20,40); // Sets the text area to 20 x 40 pixels
        menuBar.add(file); // Adds the file object to the menu bar
        file.setText("File"); // Sets the text of the file object to "File"
        file.add(open); // Adds the open object under the option bar
        setJMenuBar(menuBar);
        open.setText("Save File (Local)"); //Set the text of open object to "Save a local file"
        setLayout(new FlowLayout(FlowLayout.CENTER)); // Centering the frame
        JScrollPane js = new JScrollPane(textArea,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); // Enables a vertical scroll bar
        add(js); // Adds the scroll pane
        open.addActionListener(this); // Adds in an event action listener to the open object, as to track when it is clicked on
        
    }
    public void actionPerformed(ActionEvent e) //The action event on the save file object, executing when the user clicks on file and then save file
    {
        if (e.getSource() == open)
        {
            JFileChooser save = new JFileChooser(); // Creates and opens up a dialog box where the user can choose where to save
            int option = save.showSaveDialog(this);
            File file = new File(save.getSelectedFile().getPath()); // Saves the path in which the user wants to save the file to as the variable file.
            try
            {// Attempts to...
                String source = textArea.getText(); //Converts everything the user has entered in the text area to a string variable called source
                System.out.println(source);
                char buffer[] = new char[source.length()]; //Creates a buffer based on how long the source is, so how much the user has entered into the text area
                source.getChars(0,source.length(),buffer,0);
                FileWriter f1= new FileWriter(file+".txt"); //Gets the file name and adds the .txt file extension to the end
                for(int i=0;i<buffer.length;i++) //For 0 untill the end of the source length
                {
                    f1.write(buffer[i]); // It writes each character to the file
                }
                f1.close();

            }
        catch(Exception ae)
        {
            
        }
        }
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Geovise - Notes");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 411, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setIconImage(new ImageIcon(getClass().getResource("Volcanic.png")).getImage());//replaces the default java icon with a custom icon image.
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        my.Geovise.MainUI.NotesOpen = false; // If the window is close is changes the varaible to false to indicate to the main menu that the notes are no longer open.
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notes().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
